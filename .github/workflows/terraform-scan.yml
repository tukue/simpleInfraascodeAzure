name: Azure Infrastructure Security Scan

on:
  push:
    paths:
      - '**.tf'
      - '.github/workflows/terraform-scan.yml'
  pull_request:
    paths:
      - '**.tf'
      - '.github/workflows/terraform-scan.yml'
  workflow_dispatch:

jobs:
  security-scan:
    name: Terrascan Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Terrascan
        run: |
          TERRASCAN_VERSION=$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | jq -r '.tag_name')
          TERRASCAN_VERSION=${TERRASCAN_VERSION#v}
          wget https://github.com/tenable/terrascan/releases/download/v${TERRASCAN_VERSION}/terrascan_${TERRASCAN_VERSION}_Linux_x86_64.tar.gz -O terrascan.tar.gz
          tar -xf terrascan.tar.gz terrascan
          rm terrascan.tar.gz
          sudo install terrascan /usr/local/bin
          rm terrascan

      - name: Run Terrascan
        run: |
          # Create scan config file
          cat > config.toml << EOF
          [severity]
          level = "HIGH"
          
          [notifications]
          webhook = false
          EOF
          
          # Run scan for Azure infrastructure
          terrascan scan \
            --config config.toml \
            -t azure \
            -i terraform \
            --non-recursive \
            -d . \
            -o json | tee terrascan-results.json
          
          # Generate human readable output
          terrascan scan \
            --config config.toml \
            -t azure \
            -i terraform \
            --non-recursive \
            -d . \
            -o human | tee terrascan-human.txt
        continue-on-error: true

      - name: Parse Results
        id: parse
        run: |
          # Count violations by severity
          HIGH_COUNT=$(jq -r '.results.violations | map(select(.severity == "HIGH")) | length' terrascan-results.json || echo "0")
          MEDIUM_COUNT=$(jq -r '.results.violations | map(select(.severity == "MEDIUM")) | length' terrascan-results.json || echo "0")
          
          # Set environment variables
          echo "high_severity_count=${HIGH_COUNT}" >> $GITHUB_ENV
          echo "medium_severity_count=${MEDIUM_COUNT}" >> $GITHUB_ENV
          
          # Generate detailed report
          echo "Security Scan Summary:" > scan-report.txt
          echo "===================" >> scan-report.txt
          echo "High severity issues: ${HIGH_COUNT}" >> scan-report.txt
          echo "Medium severity issues: ${MEDIUM_COUNT}" >> scan-report.txt
          echo "" >> scan-report.txt
          
          # Extract detailed violations
          echo "High Severity Violations:" >> scan-report.txt
          jq -r '.results.violations[] | select(.severity == "HIGH") | "Rule: \(.rule_id)\nResource: \(.resource_name)\nDescription: \(.description)\n"' terrascan-results.json >> scan-report.txt
          
          cat scan-report.txt

      - name: Upload Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: azure-security-scan
          path: |
            terrascan-results.json
            terrascan-human.txt
            scan-report.txt

      - name: Check Results
        run: |
          if [ "${{ env.high_severity_count }}" -gt 0 ]; then
            echo "::error::Found ${{ env.high_severity_count }} high severity security issues!"
            cat scan-report.txt
            exit 1
          fi
          if [ "${{ env.medium_severity_count }}" -gt 5 ]; then
            echo "::warning::Found more than 5 medium severity issues. Review scan-report.txt for details."
          fi